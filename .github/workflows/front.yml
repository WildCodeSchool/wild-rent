name: client-tests-workflow

on: pull_request

env:
  CI: CI
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_USER: ${{ vars.POSTGRES_USERNAME }}
  POSTGRES_DB: ${{ vars.POSTGRES_DATABASE }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}

jobs:
  test-client:
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ vars.POSTGRES_USERNAME }}
          POSTGRES_DB: ${{ vars.POSTGRES_DATABASE }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install backend
        run: |
          cd backend && npm ci && npm run start &
          timeout 60s bash -c 'until curl --fail --request POST --header "content-type: application/json" --url "http://localhost:4000" --data "{\"query\":\"query { __typename }\"}" > /dev/null 2>&1; do sleep 1; done'

      - name: Goto frontend and run tests
        run: cd frontend && npm ci && npm run codegen && npm run test
