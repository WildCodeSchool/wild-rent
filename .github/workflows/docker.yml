name: build and push docker images

env:
  CI: CI
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_USER: ${{ vars.POSTGRES_USERNAME }}
  POSTGRES_DB: ${{ vars.POSTGRES_DATABASE }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}

on:
  pull_request:
    branches:
      - staging

jobs:
  build: 
    runs-on: ubuntu-latest
     # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ vars.POSTGRES_USERNAME }}
          POSTGRES_DB: ${{ vars.POSTGRES_DATABASE }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps: 
      - name: Check out code
        uses: actions/checkout@v2
      - name: install backend
        run: |
          cd backend && npm ci && npm run start &
          timeout 40s bash -c 'until curl --fail --request POST --header "content-type: application/json" --url "http://localhost:4000" --data "{\"query\":\"query { __typename }\"}" > /dev/null 2>&1; do sleep 1; done'
      - name: Goto frontend and run build
        run: cd frontend && npm ci && npm run codegen && npm run build 
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          push: true
          context: "{{defaultContext}}:frontend"
          file: Dockerfile.prod
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest, ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ env.COMMIT_SHORT_SHA }}
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          push: true
          context: "{{defaultContext}}:backend"
          file: Dockerfile.prod
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest, ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ env.COMMIT_SHORT_SHA }}
      - name: Send webhook to vps
        run: curl https://ops.092024-bleu-1.wns.wilders.dev/hooks/update
